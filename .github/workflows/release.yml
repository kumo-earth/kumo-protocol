name: Release SDK & UI

env:
  CI: false #Set back to true after fixing all warnings
  FORCE_COLOR: true

on: [ push, pull_request ]

jobs:
  workflow-setup:
    name: Initialize Workflow
    runs-on: ubuntu-latest
    outputs: 
      publish: ${{ steps.build-flags.outputs.publish }}
    steps:
      - name: Set builds flags
        id: build-flags
        run: |
          if [[ ${{github.event.repository.full_name}} == 'kumodao/kumo-protocol' && ${{github.event_name}} == 'push' && ( "${{github.base_ref}}" == 'main' || "${{github.ref}}" == 'refs/heads/main' ) ]]; then
            echo "{publish}={true}" >> $GITHUB_OUTPUT
          else
            echo "{publish}={false}" >> $GITHUB_OUTPUT
          fi

  test:
    name: Run SDK tests
    runs-on: ubuntu-latest
    needs: workflow-setup
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        env:
          FORCE_COLOR: 0
          ELECTRON_EXTRA_LAUNCH_ARGS: '--disable-gpu'
        with:
          node-version: 16.16.0
          cache: 'yarn'

      - run: yarn install --frozen-lockfile
      - run: yarn build
      - name: Install linux deps
        run: |
          sudo apt-get install --no-install-recommends -y \
          fluxbox \
          xvfb

      - name: Run xvfb and fluxbox
        run: |
          Xvfb :0 -screen 0 1024x768x24 -listen tcp -ac &
          fluxbox &
        env:
          DISPLAY: :0.0
          CI: true
#       - name: Run e2e tests (cypress-action)
#         run: yarn test
        # env:
        #   SECRET_WORDS: 'test test test test test test test test test test test junk'
        #   NETWORK_NAME: 'Polygon Mumbai'
        #   RPC_URL: 'https://rpc-mumbai.maticvigil.com/'
        #   CHAIN_ID: 80001
        #   SYMBOL: 'MATIC'
        #   IS_TESTNET: true
        #   BLOCK_EXPLORER: 'https://mumbai.polygonscan.com/'
        #   CI: true
      - name: Start Dev - Chain
          run: yarn test:dev-frontend:start-dev-chain
          
      - name: Run e2e tests (cypress-action)
        uses: cypress-io/github-action@cdbbcd60fb5d967d7a37d8eb148add76a7ded7b6 # pin@v5.1.0
        with:
          run: yarn test:dev-frontend:run
          browser: chrome
          spec: ./packages/dev-frontend/tests/e2e/specs/*
        env:
          SECRET_WORDS: 'test test test test test test test test test test test junk'
          NETWORK_NAME: 'Localhost'
          RPC_URL: 'http://127.0.0.1:8545'
          CHAIN_ID: 17
          SYMBOL: 'ETH'
          IS_TESTNET: true
          CI: true
          ELECTRON_EXTRA_LAUNCH_ARGS: '--disable-gpu'

      - name: Archive e2e artifacts
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # pin@v2
        if: always()
        with:
          name: e2e-artifacts
          path: |
            ./packages/dev-frontend/tests/e2e/videos
        continue-on-error: true
        
      - name: Start Dev - Chain
          run: test:dev-frontend:stop-dev-chain

      # - name: Test SDK integration against live contracts
      #   if: ${{ github.ref == 'refs/heads/main' }}
      #   run: yarn test-live

  release:
    name: Publish SDK to NPM and build Frontend image
    if: needs.workflow-setup.outputs.publish == 'true'
    runs-on: ubuntu-latest
    needs: [ workflow-setup, test ]
    steps:
      - uses: actions/checkout@v3
      
      - uses: actions/setup-node@v3
        env:
          FORCE_COLOR: 0
        with:
          node-version: 16.16.0
          cache: 'yarn'

      - run: yarn install --frozen-lockfile
      - run: yarn build

      - name: Release SDK on NPM
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: yarn release
        
      - name: Convert the GitHub repository name to lowercase
        id: repository-name
        uses: ASzc/change-string-case-action@v1
        with:
          string: ${{ github.repository }}
          
      - name: Prepare image labels and tags
        if: ${{ github.event_name != 'pull_request' }}
        id: prep
        shell: bash
        run: |
          DOCKER_IMAGE=ghcr.io/${{ steps.repository-name.outputs.lowercase }}/dev-frontend
          TAGS="${DOCKER_IMAGE}:latest,${DOCKER_IMAGE}:latest"
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Log into the GitHub Container Registry
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/setup-buildx-action@v1

      - name: Build and push image
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/build-push-action@v2
        with:
          context: ./packages/dev-frontend
          no-cache: true
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
